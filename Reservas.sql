/*--------------------------------------------------------TABLA RESERVA ---------------------------------------------------------------*/
CREATE TABLE RESERVAS (
    ID_RESERVA INT NOT NULL AUTO_INCREMENT,
    CEDULA_CLIENTE INT NOT NULL,
    ID_SALA INT NOT NULL,
	FECHA DATE NOT NULL,
    HORA TIME NOT NULL,
    FINZALIZADO BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (ID_RESERVA),
    CONSTRAINT FK_CLIENTESS FOREIGN KEY (CEDULA_CLIENTE)
	REFERENCES CLIENTES (CEDULA_CLIENTE),
    CONSTRAINT FK_SALASS FOREIGN KEY (ID_SALA)
	REFERENCES SALA (ID_SALA)
);

/*----------------------------------CREACION PROCEDIMIENTO ALMACENADO PARA CREAR UNA RESERVA-------------------------------------------*/
DROP PROCEDURE SP_CREAR_RESERVA;
DELIMITER //
CREATE PROCEDURE SP_CREAR_RESERVA (
IN TCEDULA_CLIENTE INT,
IN TID_SALA INT,
IN THORA TIME,
IN TFECHA DATE
)
BEGIN 
DECLARE IDSALA INT;
DECLARE MJS VARCHAR(100);
DECLARE CCLIENTE INT;
DECLARE DISPONIBILIDAD BOOLEAN;
SET IDSALA = (SELECT F_VER_SALA_INDIVIDUAL(TID_SALA));
SET DISPONIBILIDAD = (SELECT F_VER_DISPONIBILIDAD(TID_SALA));
SET CCLIENTE = (SELECT FUN_OBTENER_CEDULA_CLIENTE(TCEDULA_CLIENTE));
	START TRANSACTION;
	IF DISPONIBILIDAD IS TRUE THEN
			SET MJS = ("SALA NO DISPONIBLE");
			SELECT (MJS);
			ROLLBACK;
		ELSEIF IDSALA IS NULL THEN 
			SET MJS = ("ID SALA NO EXISTENTE");
			SELECT (MJS);
			ROLLBACK;
		ELSEIF CCLIENTE IS NULL THEN 
			SET MJS = ("CEDULA NO VALIDA O EXISTENTE");
			SELECT (MJS);
			ROLLBACK;
		ELSE
			INSERT INTO RESERVAS
			(CEDULA_CLIENTE, ID_SALA, HORA, FECHA)
			VALUES
			(TRIM(TCEDULA_CLIENTE), TRIM(TID_SALA), TRIM(THORA), TRIM(TFECHA));
			COMMIT;
	END IF;
END //
DELIMITER ;

CALL SP_CREAR_RESERVA("1312559824", 1 , "17:00", "2024-07-09");
SELECT * FROM RESERVAS;
DELETE FROM RESERVAS;
TRUNCATE RESERVAS;

/*----------------------------------PROCEDIMIENTO ALMACENADO PARA VISUALIZAR RESERVAS----------------------------------------------*/
DROP PROCEDURE SP_VISUALIZAR_RESERVA;
DELIMITER //
CREATE PROCEDURE SP_VISUALIZAR_RESERVA (
IN TID_RESERVA INT
)
BEGIN 
DECLARE ID_VALIDO INT;
SET ID_VALIDO = (F_VER_RESERVA_INT(TID_RESERVA));
START TRANSACTION;
	IF ID_VALIDO IS NULL THEN
		-- SELECT * FROM RESERVAS;
        SELECT R.ID_RESERVA, R.CEDULA_CLIENTE,  R.ID_SALA, S.NOMBRE_SALA, R.FECHA, R.HORA, R.FINZALIZADO FROM RESERVAS AS R
        INNER JOIN SALA AS S ON R.ID_SALA = S.ID_SALA;
        -- AND R.FINZALIZADO IS FALSE;
        COMMIT;
	ELSE 
		SELECT R.ID_RESERVA, R.CEDULA_CLIENTE,  R.ID_SALA, S.NOMBRE_SALA, R.FECHA, R.HORA, R.FINZALIZADO FROM RESERVAS AS R
        INNER JOIN SALA AS S ON R.ID_SALA = S.ID_SALA
		WHERE R.ID_RESERVA = TID_RESERVA; 
        -- AND R.FINZALIZADO IS FALSE;
        COMMIT;
	END IF;
END //
DELIMITER ;
CALL SP_VISUALIZAR_RESERVA(NULL);

/*--------------------------------------------FUNCION PARA VER SOLO UNA RESERVA----------------------------------------------------*/

DROP FUNCTION F_VER_RESERVA_INT;
DELIMITER //
CREATE FUNCTION F_VER_RESERVA_INT(TID_SALA INT)
RETURNS INT DETERMINISTIC 
BEGIN
    RETURN (SELECT ID_RESERVA FROM RESERVAS WHERE ID_SALA =  TID_SALA);
END //
DELIMITER ;
SELECT F_VER_RESERVA_INT(1);

/*------------------------------------------VISUALIZAR RESERVAS CLIENTES INDIVIDUAL------------------------------------------------------*/
DROP PROCEDURE SP_VISUALIZAR_RESERVA_CLIENTE_INDIVIDUAL;
DELIMITER //
CREATE PROCEDURE SP_VISUALIZAR_RESERVA_CLIENTE_INDIVIDUAL (
IN TI_CEDULA INT
)
BEGIN
DECLARE VALIDAR_CEDULA INT;
DECLARE MSJ VARCHAR(50);
SET MSJ = 'CEDULA NO VALIDA O EXISTENTE';
SET VALIDAR_CEDULA =  (SELECT FUN_OBTENER_CEDULA_CLIENTE(TI_CEDULA));
START TRANSACTION; 
	IF VALIDAR_CEDULA IS NULL THEN
		SELECT MSJ;
        ROLLBACK;
	ELSE
        SELECT R.ID_RESERVA, R.CEDULA_CLIENTE, R.ID_SALA, S.NOMBRE_SALA, R.FECHA, R.HORA FROM RESERVAS AS R
        INNER JOIN SALA AS S ON R.ID_SALA = S.ID_SALA
        INNER JOIN CLIENTES C ON R.CEDULA_CLIENTE = C.CEDULA_CLIENTE
		WHERE C.CEDULA_CLIENTE = TI_CEDULA  AND R.FINZALIZADO IS FALSE;
        COMMIT;
	END IF;
-- COMMIT;
END //
DELIMITER ;
CALL SP_VISUALIZAR_RESERVA_CLIENTE_INDIVIDUAL(1312559824);

/*------------------------------TRIGGER PARA DISPONIBILIDAD PONERLA EN VERDADERO-----------------------------------------------------*/
DROP TRIGGER TG_IDISPONIBILIDAD;
-- CREACION DE TRIGGER PARA ACTUALIZAR DISPONIBLIDAD DE SALA
DELIMITER //
CREATE TRIGGER TG_IDISPONIBILIDAD AFTER INSERT ON RESERVAS
FOR EACH ROW
BEGIN
	UPDATE SALA SET DISPONIBILIDAD = TRUE WHERE ID_SALA = NEW.ID_SALA;
END //
DELIMITER ;