/*--------------------------------------------------------TABLA SALA ------------- ----------------------------------------------------*/
CREATE TABLE SALA (
    ID_SALA INT NOT NULL AUTO_INCREMENT,
    NOMBRE_SALA VARCHAR(100) NOT NULL,
    ID_NOMBRE_TRATAMIENTO INT,
    DISPONIBILIDAD BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (ID_SALA),
    CONSTRAINT FK_NOMBRE_TRATAMIENTO FOREIGN KEY (ID_NOMBRE_TRATAMIENTO)
	REFERENCES TIPO_TRATAMIENTO (ID_NOMBRE_TRATAMIENTO),
    CONSTRAINT UK_SALA UNIQUE (NOMBRE_SALA)
);
SELECT * FROM SALA;
/*----------------------------------------------------PROCEDIMIENTO CREAR SALA ------------- --------------------------------------------*/
DROP PROCEDURE SP_CREAR_SALA;
DELIMITER //
CREATE PROCEDURE SP_CREAR_SALA (
IN TNOMBRE_SALA VARCHAR(100),
IN TID_ID_TRATAMIENTO INT
)
BEGIN 
DECLARE IDTRATAMIENTO INT;
DECLARE MSJ VARCHAR(100);
SET IDTRATAMIENTO = (SELECT F_VER_TRATAMIENTO(TID_ID_TRATAMIENTO));
START TRANSACTION;
	IF IDTRATAMIENTO IS NULL
		THEN SET MSJ = CONCAT("NO EXISTE EL ID TRATAMIENTO" , " " ,TID_ID_TRATAMIENTO);
		SELECT MSJ;
		ROLLBACK;
	ELSE
		INSERT INTO SALA (NOMBRE_SALA, ID_NOMBRE_TRATAMIENTO) VALUES (TNOMBRE_SALA, TID_ID_TRATAMIENTO);
		COMMIT;
END IF;
END //
DELIMITER ;
CALL SP_CREAR_SALA("SALA FACIAL 2", 1);

/*----------------------------------------------------PROCEDIMIENTO VER SALA ------------- --------------------------------------------*/
DROP PROCEDURE SP_VER_SALAS_TRATAMIENTO;
DELIMITER //
CREATE PROCEDURE SP_VER_SALAS_TRATAMIENTO (
IN ID_TRAT INT
)
BEGIN 
DECLARE VIDTRATAMIENTO INT;
DECLARE MSJ VARCHAR(100);
SET VIDTRATAMIENTO = (SELECT F_VER_TRATAMIENTO(ID_TRAT));
START TRANSACTION;
	IF VIDTRATAMIENTO IS NULL THEN
		SET MSJ = ("ID TRATAMIENTO NO EXISTENTE ELEGIR 1 PARA FACIAL O 2 PARA ESTETICA");
        SELECT MSJ;
        -- SELECT ID_SALA, NOMBRE_SALA, DISPONIBILIDAD FROM SALA;
        COMMIT;
	ELSE
		SELECT ID_SALA, NOMBRE_SALA, DISPONIBILIDAD FROM  SALA
        WHERE ID_NOMBRE_TRATAMIENTO = ID_TRAT AND DISPONIBILIDAD IS FALSE;
        COMMIT;
	END IF;
END //
DELIMITER ;
CALL SP_VER_SALAS_TRATAMIENTO(1);

/*--------------------------------------------------FUNCION VER SALA DISPONIBILIDAD ----------------------------------------------------*/
DROP FUNCTION F_VER_DISPONIBILIDAD;
DELIMITER //
CREATE FUNCTION F_VER_DISPONIBILIDAD(TID_SALA INT)
RETURNS INT DETERMINISTIC 
BEGIN
    RETURN (SELECT DISPONIBILIDAD FROM SALA WHERE ID_SALA =  TID_SALA);
END //
DELIMITER ;
SELECT F_VER_DISPONIBILIDAD(2);

/*--------------------------------------------------FUNCION VER SALA INDIVIDUAL ----------------------------------------------------*/
DROP FUNCTION IF EXISTS F_VER_SALA_INDIVIDUAL;
DELIMITER //
CREATE FUNCTION F_VER_SALA_INDIVIDUAL(TID_SALA INT)
RETURNS INT DETERMINISTIC 
BEGIN
    RETURN (SELECT ID_SALA FROM SALA WHERE ID_SALA =  TID_SALA);
END //
DELIMITER ;
SELECT F_VER_SALA_INDIVIDUAL(1);

/*-----------------------------VER TODAS LAS SALAS DISPONIBLES TANTO FACIAL COMO ESTETICO PA-------------------------------------*/
DROP PROCEDURE SP_VER_SALAS_TRATAMIENTO_TODAS_DISPONIBLES;
DELIMITER //
CREATE PROCEDURE SP_VER_SALAS_TRATAMIENTO_TODAS_DISPONIBLES (
IN TID_SALA INT
)
BEGIN 
DECLARE VIDTRATAMIENTO INT;
DECLARE MSJ VARCHAR(100);
SET VIDTRATAMIENTO = (SELECT F_VER_SALA_INDIVIDUAL(TID_SALA));
START TRANSACTION;
	IF VIDTRATAMIENTO IS NULL THEN
		SELECT ID_SALA, NOMBRE_SALA, DISPONIBILIDAD FROM SALA;
        -- WHERE  DISPONIBILIDAD IS FALSE;
        COMMIT;
	ELSE
		SELECT ID_SALA, NOMBRE_SALA, DISPONIBILIDAD FROM  SALA
        WHERE ID_SALA = TID_SALA; 
        -- AND DISPONIBILIDAD IS FALSE;
        COMMIT;
	END IF;
END //
DELIMITER ;
CALL SP_VER_SALAS_TRATAMIENTO_TODAS_DISPONIBLES(NULL);
